---
layout: post
title: "프로그래머스 기초트레이닝 Day21-2"
date: 2024-02-18 12:10:00 +0900
categories: Javascript
---

### 전국 대회 선발 고사😀

0번부터 n - 1번까지 n명의 학생 중 3명을 선발하는 전국 대회 선발 고사를 보았습니다. <br>
등수가 높은 3명을 선발해야 하지만, 개인 사정으로 전국 대회에 참여하지 못하는 학생들이 있어 참여가 가능한 학생 중 등수가 높은 3명을 선발하기로 했습니다.<br>

각 학생들의 선발 고사 등수를 담은 정수 배열 rank와 전국 대회 참여 가능 여부가 담긴 boolean 배열 attendance가 매개변수로 주어집니다.<br>
전국 대회에 선발된 학생 번호들을 등수가 높은 순서대로 각각 a, b, c번이라고 할 때 10000 × a + 100 × b + c를 return 하는 solution 함수를 작성해 주세요.<br>

※ 제한 사항<br>
3 ≤ rank의 길이 = attendance의 길이 ≤ 100<br>
rank[i]는 i번 학생의 선발 고사 등수를 의미합니다.<br>
rank의 원소는 1부터 n까지의 정수로 모두 서로 다릅니다.<br>
attendance[i]는 i번 학생의 전국 대회 참석 가능 여부를 나타냅니다.<br>
attendance[i]가 true라면 참석 가능, false면 참석 불가능을 의미합니다.<br>
attendance의 원소 중 적어도 3개는 true입니다.<br>

입출력 <br>

|         rank          |                  attendance                   | result |
| :-------------------: | :-------------------------------------------: | ------ |
| [3, 7, 2, 5, 4, 6, 1] | [false, true, true, true, true, false, false] | 20403  |
|       [1, 2, 3]       |              [true, true, true]               | 102    |
|  [6, 1, 5, 2, 3, 4]   |    [true, false, true, false, false, true]    | 50200  |

<br>

```javascript
function solution(rank, attendance) {
  return [
    ...attendance.reduce((acc, cur, idx) => {
      if (cur) {
        acc.set(idx, rank[idx]);
      }

      return acc;
    }, new Map()),
  ]
    .sort((a, b) => a[1] - b[1])
    .reduce((acc, cur, idx) => {
      const [student, rank] = cur;

      if (idx === 0) acc += 10000 * student;
      if (idx === 1) acc += 100 * student;
      if (idx === 2) acc += student;

      return acc;
    }, 0);
}
```

attendance.reduce((acc, cur, idx) => {...}, new Map()): attendance 배열을 순회하면서 참여 가능한 학생의 인덱스와 등수를 Map에 저장합니다.<br>
[...acc]: Map을 배열로 변환합니다. 배열의 각 요소는 [인덱스, 등수] 형태입니다.<br>
.sort((a, b) => a[1] - b[1]): 등수를 기준으로 배열을 오름차순으로 정렬합니다.<br>
.reduce((acc, cur, idx) => {...}, 0): 정렬된 배열을 순회하면서 각 학생에게 부여할 등수를 계산합니다.<br>
idx === 0일 때: 가장 높은 등수의 학생에게는 10000을 곱하여 더합니다.<br>
idx === 1일 때: 두 번째로 높은 등수의 학생에게는 100을 곱하여 더합니다.<br>
idx === 2일 때: 세 번째로 높은 등수의 학생에게는 그냥 더합니다.<br>
최종적으로 계산된 결과값을 반환합니다.<br>
코드는 주어진 등수와 참여 여부를 이용하여 가장 높은 3명의 학생 번호를 계산하고, 그 결과값을 10000의 자리, 100의 자리, 1의 자리로 나타낸 후 반환합니다<br>
